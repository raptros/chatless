package chatless.model

import argonaut._
import Argonaut._
import scalaz.syntax.std.option._
import scalaz.syntax.std.boolean._

/** model for initializing a topic. all the fields have default values
  * @param fixedId if specified, this topic should be created with a particular ID (otherwise it can be autogenerated)
  * @param banner the initial banner for the topic
  * @param info
  * @param invite
  */
case class TopicInit(
  fixedId: Option[String] = None,
  banner: String = "",
  info: Json = Json.obj(),
  invite: List[UserCoordinate] = Nil)


object TopicInit {
  implicit def topicInitEncodeJson = EncodeJson[TopicInit] { ti =>
    ("fix-id" :=? ti.fixedId) ->?:
      ("banner" := ti.banner) ->:
      ("info" := ti.info) ->:
      ("invite" := ti.invite) ->:
      jEmptyObject
  }

  import DecodeResult._

  implicit def topicInitDecodeJson = DecodeJson[TopicInit] { c =>
    for {
      fs <- c.fieldSet.fold { fail[Set[Json.JsonField]]("this is not an object", c.history) } { ok[Set[Json.JsonField]] }
      fixedId <- (c --\ "fix-id").as[String].option
      banner <- (fs contains "banner") ? (c --\ "banner").as[String] | ok("")
      info <- (fs contains "info") ? (c --\ "info").as[Json] | ok(jEmptyObject)
      invite <- (fs contains "invite") ? (c --\ "invite").as[List[UserCoordinate]] | ok(Nil)
    } yield TopicInit(fixedId, banner, info, invite)
  }
}
