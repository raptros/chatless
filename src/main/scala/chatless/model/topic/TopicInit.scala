package chatless.model.topic

import argonaut._
import Argonaut._
import scalaz.syntax.std.boolean._
import chatless.model.UserCoordinate
import scalaz._
import chatless.model._
import chatless.model.ids._

/** model for initializing a topic. all the fields have default values
  * @param fixedId if specified, this topic should be created with a particular ID (otherwise it can be autogenerated)
  * @param banner the initial banner for this topic
  * @param info the initial info json object
  * @param mode the initial mode object for this new topic
  */
case class TopicInit(
  fixedId: Option[String @@ TopicId] = None,
  banner: String = "",
  info: Json = Json.obj(),
  mode: TopicMode = TopicMode.default)


object TopicInit {
  implicit def topicInitEncodeJson = EncodeJson[TopicInit] { ti =>
    ("fix-id" :=? ti.fixedId) ->?:
      ("banner" := ti.banner) ->:
      ("info" := ti.info) ->:
      jEmptyObject
  }

  import DecodeResult._

  implicit def topicInitDecodeJson = DecodeJson[TopicInit] { c =>
    for {
      fs <- c.fieldSet.fold { fail[Set[Json.JsonField]]("this is not an object", c.history) } { ok[Set[Json.JsonField]] }
      fixedId <- (c --\ "fix-id").as[String @@ TopicId].option
      banner <- (fs contains "banner") ? (c --\ "banner").as[String] | ok("")
      info <- (fs contains "info") ? (c --\ "info").as[Json] | ok(jEmptyObject)
      mode <- (fs contains "mode") ? (c --\ "mode").as[TopicMode] | ok(TopicMode.default)
    } yield TopicInit(fixedId, banner, info, mode)
  }
}
